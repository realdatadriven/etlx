name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc g++ unixodbc-dev
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
      - name: Build Linux Binaries
        run: |
          mkdir -p dist
          CGO_ENABLED=1 go build -o dist/etlx-linux-amd64 ./cmd/main.go
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-binaries
          path: dist/*linux*

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Install Dependencies
        run: |
          # Ensure MSVC (Visual Studio Build Tools) is available
          echo "Windows runners come pre-installed with required tools"
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
      - name: Build Windows Binary
        run: |
          mkdir -p dist
          go build -o dist/etlx-windows-amd64.exe ./cmd/main.go
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-binaries
          path: dist/*windows*

  build-darwin:
    runs-on: macos-latest
    steps:
      - name: Install Dependencies
        run: |
          brew update
          brew install gcc unixodbc
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
      - name: Build macOS Binaries
        run: |
          export CGO_CFLAGS="-I/usr/local/include"
          export CGO_LDFLAGS="-L/usr/local/lib"
          mkdir -p dist
          CGO_ENABLED=1 go build -o dist/etlx-darwin-amd64 ./cmd/main.go
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: darwin-binaries
          path: dist/*darwin*
    
  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-darwin]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: all
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
      - name: Upload Linux AMD64 Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/etlx-linux-amd64
          asset_name: etlx-linux-amd64
          asset_content_type: application/octet-stream
      - name: Upload Windows AMD64 Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/etlx-windows-amd64.exe
          asset_name: etlx-windows-amd64.exe
          asset_content_type: application/octet-stream
      - name: Upload macOS AMD64 Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/etlx-darwin-amd64
          asset_name: etlx-darwin-amd64
          asset_content_type: application/octet-stream
