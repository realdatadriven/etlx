name: Debug Windows Build with DuckDB Library

on:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      # Step 3: Download DuckDB Precompiled Library
      - name: Download DuckDB Library
        run: |
          $version = "v1.1.3"
          $duckdb_url = "https://github.com/duckdb/duckdb/releases/download/$version/libduckdb-windows-amd64.zip"
          Invoke-WebRequest -Uri $duckdb_url -OutFile duckdb.zip
          Expand-Archive -Path duckdb.zip -DestinationPath duckdb
          echo "DuckDB library extracted to $(Get-Location)\duckdb"

      # Step 4: Set environment variables for CGO
      - name: Set Environment Variables
        run: |
          set CGO_ENABLED=1
          set CGO_CFLAGS=-I$(Get-Location)\duckdb\
          set CGO_LDFLAGS=-L$(Get-Location)\duckdb\

      # Step 5: Build the application
      - name: Build Windows Binary with DuckDB
        run: |
          mkdir -p dist
          go build -tags=duckdb_use_lib -o dist/etlx-windows-amd64.exe ./cmd/main.go

      # Step 6: Upload build logs for debugging (if build fails)
      - name: Upload Logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: build-logs
          path: ${{ github.workspace }}

      # Step 7: Upload built binary for testing (if successful)
      - name: Upload Binary
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: windows-binary
          path: dist/etlx-windows-amd64.exe
